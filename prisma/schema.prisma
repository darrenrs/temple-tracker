datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Auth.js User model with product-specific attributes
model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  isAdmin            Boolean   @default(false)
  isAccountActivated Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  accounts           Account[]
  visits             Visit[]
}

// Auth.js Account model
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// Defines a temple
model Temple {
  id             Int           @id @default(autoincrement())
  slug           String        @unique
  name           String        @unique
  country        String
  state          String?
  county         String?
  city           String
  latitude       Float?
  longitude      Float?
  dateDedicated  DateTime?     @db.Date
  templeStatusId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  visits         Visit[] // One-to-many relationship with Visit
  templeStatus   TempleStatus? @relation(fields: [templeStatusId], references: [id])
}

// Defines the status of the temple
model TempleStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  temples     Temple[] // One-to-many relationship with Temple
}

// Defines the ordinances performed in the temple
model Ordinance {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  visits      VisitOrdinance[] // Many-to-many relationship with Visit
}

// Defines a single timestamped visit to a temple (with zero or more ordinances)
model Visit {
  id          String           @id @default(cuid())
  userId      String
  templeId    Int
  sessionDate DateTime         @db.Timestamp
  userNote    String           @db.VarChar(10000)
  userFiles   Bytes[] // To-Do: Upload files to Vercel blob storage instead
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  temple      Temple           @relation(fields: [templeId], references: [id])
  ordinances  VisitOrdinance[] // Many-to-many relationship with Ordinance

  @@unique([userId, templeId, sessionDate])
  @@index([userId])
  @@index([templeId, sessionDate])
}

// Junction table to handle the many-to-many relationship between Visit and Ordinance
model VisitOrdinance {
  visitId     String
  ordinanceId Int
  count       Int?
  visit       Visit     @relation(fields: [visitId], references: [id])
  ordinance   Ordinance @relation(fields: [ordinanceId], references: [id])

  @@id([visitId, ordinanceId]) // Composite primary key to enforce uniqueness
  @@index([ordinanceId])
}
